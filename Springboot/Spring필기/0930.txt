객체지향 설계 5대원칙 - SOLID

S	SRP	
단일 책임 원칙 (Single responsibility principle)
한 클래스는 하나의 책임만 가져야 한다.
하나의 메서드는 하나의 책임만 가져야한다 .
O	OCP	
개방-폐쇄 원칙 (Open/closed principle)
“소프트웨어 요소는 확장에는 열려 있으나 변경에는 닫혀 있어야 한다.”
상속에는 Open 변경에는 Close 해야한다 .
코드를 변경할 일이 있으면 변경하지말고 , 웬만하면 상속을 통해서 변경해라 
L	LSP	
리스코프 치환 원칙 (Liskov substitution principle)
“프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야 한다.” 계약에 의한 설계를 참고하라.
같은 조상의 다른 클래스로 바꿔도 동작해야한다 . (다형성)
Spring Data JPA 
Hibernate를 다른 구현체로 바꿔도 문제가 생기지않느낟 .
Isf4j
Logback, Log4j같이 다른 구현체로 바꿔도 문제가 생기지않는다 .

I	ISP	
인터페이스 분리 원칙 (Interface segregation principle)
“특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫다.
유사한인터페이스가 있더라도 목적이 다르면 분리해야한다 .

D	DIP	
의존관계 역전 원칙 (Dependency inversion principle)
프로그래머는 “추상화에 의존해야지, 구체화에 의존하면 안된다.”[4] 의존성 주입은 이 원칙을 따르는 방법 중 하나다.
추상화에 의존한코드를 작성해야한다 .
코드가 너무 구체적이면 변경에 불리하다 .

create todo 구현
-> todo 아이템을 데이터베이스에 추가하는 기능


json
{}안에서 작성 .
javascript객체와 유사함
[{"key" : 123 }]

영속계층 
TodoRespository
save() , findByUserId();

서비스계층 
TodoService에 update()메서드를 작성 


DeleteTodo 기능 구현하기
- Todo를 삭제하기 위한 기능 .

영속계층
TodoRepository의 delete(), findByUserId() 메서드를 사용할 것 

서비스계층
delete()메서드 만들기

표현계층 
delete()메서드 만들기 



조회 
Get localhost:9090/todo

추가
Post localhost:9090/todo

수정
PUT localhost:9090/todo

삭제

DELETE localhost:9090/todo











