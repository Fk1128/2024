SQL을 직접 작성하지않는다 . -> JPA 

@Entity
엔티티 클래스를 가지고 테이블을 만들어준다 .

JPA에서 제공하는 인터페이스를 가지고 쿼리문을 대신한다 .
findAll() -> select*from 테이블명 ;
save() -> insert,update
delete() -> delete from 테이블명 where id= xx;



DTO -> Entity -> controller service() repository db 


메서드를 만드는 방법

접근제한자 반환형 함수명(매개변수){
 	작업하고싶은내용
		
}


접근제한자
public -> 모든곳에서 접근간으
private -> 현재 클래스에서만 접근가능
default -:> 현재 패키지까지에서만 사용가능
protected -> 상속관계에서만 사용가능 

반환형 
반환하려고 하는 데이터의 타입 -> 기본자료형 뿐만아니라
String 이나 우리가 만든 클래스의 타입도 가능하다 . 참조자료형 가능  
반환을 안하면 void 


함수명
함수의 이름 

매개변수 
함수가 호출 될 때 값을 전달받아 저장하는 지역변수 .


함수를호출 0> 함수가 선언된곳으로가서 작업을 수행 -> 수행을 마치고나면 함수를 호출한곳으로 흐름이 돌아온다 .
반환된 값이 있다면 값을 가지고 돌아온다 .



React .
컴포넌트 -  UI의 조각 , 재사용 가능 




-----------------------------------------------------------------------------------
프로젝트를 만들고 구조를 만드는과정 .

스프링부트 프로젝트 만들고 import하기 
-java, gradle 
- Group : com.koera
- Artifact : product

필요의존성
- Spring Web
- H2
- lombok
- Spring Data JPA

src/main/resources application.properties : server.port = 9090 ; 

Product 프로젝트 생성 . -> entity패키지 생성 - >ProductEntity클래스 
상품id (primary key ) ,
- 상품이름 
- 상품가격 
- 상품재고  
- 등록날짜  
- 수정날짜 



ProductDTO 클래스 만들기
속성 
- 상품번호
- 상품이름 
- 상품재고
- 상품 가격
- 등록날짜
- 수정날짜 

기능
Entity -> DTO 변환기능
DTO -> Entity 변환기능


ResponseDTO
- 클라이언트와 데이터를 직접적으로 주고받기 위한 DTO클래스
- 제네릭타입을 가지고있다 .
속성
- String error
- 리스트 data 

서비스 계층 만들기
ProductService 클래스 생성
- ProducRepository를 주입 

표현계층 만들기
ProductController 클래스 생성하기
-ProductService 를 주입하기 

----------------------------------------------------------------
조회하는 기능 만들기
- ProductService : findAll() 


- ProductController
- 결과는 ResponseDTO에 담아서 보내기 
- 데이터베이스에 들어있는 모든 상품을 조회하는 API 만들기 
- HTTPMETHOD : GET 


스트림연산
1. 스트림의 생성 entities.stream() 
2. 중간연산 (하고싶은작업 Entity -> DTO ) map(ProductDTO::new)
3. 마무리연산 .(리스트에 담아서 반환)  collect(Colltectors.toList());



추가하기
- 클라이언트로부터 데이터를 넘겨받아서 db에 데이터 추가하기

조회기능의 메서드를 사용하여 모든 DTO리스트를 먼저 받는다 . -> Repository에서 추가할 en


ProductService
- 메서드명 create() 

ProductController
-HTTP 메서드 : POST
-메서드명 : createProduct() 
--------------------------------------------------------------------------
상품정보를 볼 수 있는 화면 만들기 
-product-react -app
- src에 p_info.js 만들기
- axios로 백엔드에 데이터를 요청하고 받아와서 화면에 출력하기 .
- ApiService파일의 call메서드를 사용해도 좋습니다 .

- src에 ADdProduct.js만들기
- 상품추가버튼 누르면 추가 속성 창이뜨는 컴포넌트 만들기 


-------------------------------------------------------------------------------
주문하기
OrderEntity
-com.korea.product.model에 OrderEntity클래스 만들기

속성
-주문번호(Primary key)
-상품번호
-주문 개수
-주문 날짜


OrderDTO
-주문내역을 조회할 때 총 결제금액 까지 보여줄것이다.

속성
-주문번호
-상품번호
-상품이름
-주문개수
-상품가격
-결제금액
-주문 날짜 

OrderRepository
-JpaRepository


OrderService 클래스
-Order Repository를 주입

OrderController클래스
-OrderService를 주입
-mapping : orders

주문내역 조회하기
-List<Object[]>  findAllOrderTotalPrices()

OrderService
-메서드명 getAllOrderTotals()


OrderController
- HTTP 메소드 : GET
- 리소스 : total
- 메서드명 : getAllOrderTotals()

주문하기
- 클라이언트로부터 productId와 productCount 를 전달받아 주문테이블에 주문내역 추가하기 .

OrderService 에 주문하기 로직 

1. 상품이 존재하는지 확인  product != null

2. 재고를 확인 ProductStock.length > 0

3. 주문하기 (DB에 주문내역 저장하기)

4. 재고 감소

5. 전체목록 반환하기 .

----------------------------------------------------------------
1.라디오 버튼을 누른 필드만 입력할 수 있게하고 
check된곳의  Item.productId.readOnly 값만 변환하게끔


2. 라디오 버튼을 누르고 주문개수를 입력해서 주문완료 버튼을 누르면 백엔드로 전달 .























1234 0   5







