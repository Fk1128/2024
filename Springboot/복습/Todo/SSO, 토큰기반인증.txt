

basic 인증
클라이언트 요청 -> 서버 인증요구 -> 클라이언트 자격증명 전송 -> 서버 인증확인 

단순하고 구현이쉽다 HTTP 표준에 포함되어있다는 장점이있지만
보안이 취약하다는 단점과 HTTPS 가 필수적으로 사용되어야한다 .
그렇지않으면 네트워크상에서 자격증명이 평문으로 전송되어 탈취 위험이 크다 .

baisc 인증은 상태를 유지하지 않기떄문에 매 요청마다 인증정보를 함께 전송해야한다 .

유저를 로그아웃시킬 수 없다 .
모든 요청이 일종의 로그인요청이기 떄문이다 .
여러 디바이스에서 로그인이 가능한 경우 한꺼번에 로그아웃하거나 
디바이스별로 로그아웃할 수 있는 기능이 없다 .
사용자의 계정 정보가 있는 저장 장소의 경우 인증 서버와 인증 DB에 과부하가 걸릴 확률이 높다.

그렇기에 조금 더 유연한 토큰기반의 인증을 사용한다 .
사용자가 인증에 성공한 후 토큰을 발급받아 이를 사용해 서버와의 통신에서 인증을 처리하는 방식이다 .
이방식은 세션기반 인증과 달리 서버에 사용자의 상태를 저장하지 않고 , 토큰을 통해 인증을 관리하기 때문에
무상태(Stateless) 방식으로 작동한다 .
이는 Restful API와 같은 분산시스템에서 많이 사용된다 . 

토큰 이란 .
사용자를 구별할 수 있는 문자열이다 .
서버가 자신만의 노하우로 토큰을 만들어준다 .

토큰기반인증의 동작 방식

1. 사용자가 로그인 .
사용자가 로그인요청을 서버에 보낸다 .
이때 사용자는 일반적으로 사용자 명과 비밀번호를 전송한다 .
2 서버가 사용자 인증
서버는 사용자명과 비밀번호를 확인하여 사용자가 올바른 자격을 가지고있는지 확인한다 .
3. 토큰발급
인증에 성공하면 서버는 사용자의 정보 또는 권한을 포함한 토큰을 생성하여 클라이언트에게 반환한다 .
토큰은 JWT 형식을 사용한다.
4. 클라이언트가 토큰 저장
클라이언트는 이토큰을 브라우저의 로컬스토리지(Local Storage) 또는 세션스토리지(Session Storage) 등에 저장한다 .
쿠키에 저장하는 경우도 있다 .
5. 토큰을 포함한 요청
이후 클라이언트는 서버에 요청을 보낼때마다 이 토큰을 HTTP 요청 헤더에 포함시켜 인증을 처리한다 .
일반적으로 Authorization 헤더에 Bearer <토큰> 형식으로 토큰을 포함한다 .



SSO 란 ? 
Single Sign-On
토큰 기반인증의 한 형태이다 .
SSO 는 한번의 로그인으로 여러개의 어플리케이션, 시스템에 접근할 수 있게 해주는 인증방식이다 .
즉 사용자가 한번 로그인하면 이후 다른 시스템이나 서비스에서도 추가로 로그인할 필요가 없이 자동으로 접근할 수 있다 .

SSO의 주요개념

1.중앙인증 시스템
SSO 는 사용자의 인증정보를 중앙에서 관리하는 시스템이 있어야한다 .
이 중앙인증시스템에서 사용자가 인증되면 그 정보가 다른시스템에 전달되어 사용자는 추가로그인을 요구받지않는다 .

2. 토큰기반인증
SSO 는 보통 인증이 완료된 후 사용자에게 토큰을 발급한다 . 이토큰을 가지고 사용자는 다양한 서비스에 접근할 수 있게된다 .
일반적으로 SAML (Security Assertion Markup Language) OAuth , JWT(JSON Web Token ) 같은 기술이 사용된다 .

3. 편리성
사용자는 여러번 로그인할 필요가 없기때문에 사용자경험이 크게 향상된다 .
특히 대규모 시스템에서는 다양한 애플리케이션에 접속할 때마다 로그인하는 번거로움이 없어지기 때문에 매우 유용하다 .

4. 보안
SSO 는 보안관점에서 유리하다 .사용자 비밀번호를 여러 시스템에 저장하지 않고 중앙에서만 관리하므로 보안위험이 줄어든다 .
또한SSO 시스템에서 강력한 인증방식을 적용하면 여러시스템에 걸쳐 강화된 보안이 적용된다 .

SSO의 작동방식

1. 사용자 로그인 요청 : 사용자가 애플리케이션 A에 접근하려고하면 , 로그인 화면으로 리디렉션된다 . 이 로그인화면은 SSO 서버로부터 제공된다 .

2. 인증요청 : SSO 서버는 사용자에게 인증을 요구하고 , 사용자는 ID 와 비밀번호를 입력한다 .

3. 토큰발급 : 인증이 성공하면 SSO 서버는 사용자에게 인증토큰 (예 : SAML,JWT) 을 발급해준다 .

4. 접근허용 : 애플리케이션 A는 SSO 서버로부터 받은 토큰을 확인하고 , 해당 사용자가 인증되었음을 확인한 후 애플리케이션에 접근을 허용한다 .

5. 다른 애플리케이션에 접근 : 이후 사용자가 애플리케이션 B에 접근하려고할때 SSO 서버는 사용자가 이미 인증된 상태임을 인식하고 자동으로 접근을 허용한다 .
사용자는 다시 로그인할 필요가 없다 .



SSO 의 장점
사용자 편의성 한번 로그인으로 여러 시스템에 접근할수있어 , 사용자 입장에서 매우 편리하다 .
보안 관리강화 : 비밀번호를 여러 시스템에 저장할 필요가 없고 중앙에서 일관된 보안정책을 적용할 수있다 .
효율성 : 사용자가 여러번 로그인을 할 필요가 없어 로그인절차에서 오는 중복된 작업을 제거할 수 있다 .

SSO 단점
단일 실패지점 : 만약 SSO 시스템에 문제가 발생하거나 해킹당하면 , 모든서비스에 대한 접근이 차단되거나 보안이 취약해질 수 있다 .
복잡한 설정 : 여러 시스템과 통합 및 보안관리가 복잡할 수 있다 . 또한 각 서비스와의 연동을 신중하게 설정해야한다 .

SSO 를 사용하는 대표적인 예시

Google 계정으로 로그인 : 한번 구글계정에 로그인하면 ,Gmail,Google Drive , Youtube 등 여러 구글서비스에 자동으로 로그인된다 .
기업내 SSO : 대기업에서는 직원들이 한번의 로그인을 통해 사내 여러시스템(메일문서관리 , 인사시스템 등) 에 접근할 수 있도록 SSO 를 활용하는 경우가 많다 .

SSO 는 사용자 경험을 개선하고 , 보안 및 관리측면에서 큰 장점을 제공하는 인증방식이다 .
















