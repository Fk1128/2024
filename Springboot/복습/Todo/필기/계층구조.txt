레이어 아키텍처

Request 데이터를 받을 Dto
API 요청을 받을 Controller
트랜잭션, 도메인 기능 간의 순서를 보장하는 Service

Domain Model 
Data Accsee Layer (Repository Layer)
Business Layer(Service Layer)
Presentation Layer(Controller)


Domain Model 
도메인 모델(객체)은 내가 개발하고자 하는 영역을 분석하고, 그 분석의 결과로 도출된 모델(객체)이라고 할 수 있다.
DB의 테이블과 매칭될 클래스 
Entity 클래스라고도 부른다 .

Domain 클래스와 DTO 클래스를 분리하는 이유
View Layer와 DB Layer의 역할을 철저하게 분리하기 위해서
테이블과 매핑되는 Entity 클래스가 변경되면 여러 클래스에 영향을 끼치게 되지만 
View와 통신하는 DTO 클래스는 자주 변경되므로 분리해야 한다.
즉 DTO는 Domain Model을 복사한 형태로, 다양한 Presentation Logic을 추가한 정도로 사용하며
Domain Model 객체는 Persistent만을 위해서 사용한다.



Data Access Layer (Repository Layer) Persistence Layer 
Database 관련 작업 수행을 담당하는 Layer
DAO 인터페이스와 @Repository 어노테이션을 사용하여 작성된 DAO 구현 클래스가 이 계층에 속함 
Database 에 data를 CRUD 하는 계층 
Service 레이어와 Database 사이의 추상화된 계층 
DB 기술이 변경되면 Data access Layer의 코드는 변경될수있지만
Service 계층의 코드는 변경되지 않는다 .


Business Layer(Service Layer)
모든 비즈니스 로직을 처리 .
비즈니스 로직이란 
웹 사이트에서 벌어지는 모든 작업, 이를테면 주문 서비스라고 한다면 주문 개수, 가격 등의 데이터를 처리하기 위한 로직, 
주문 처리를 하다가 발생하는 예외 처리 로직, 주문을 받거나 취소하는 것 같이 프로세스를 구현하기 위한 로직 

Presentation Layer 와 Persistence Layer 의 계층사이를 연결하는 역할
위 두 계층이 직접적으로 통신하지 않게한다 .
@Service 어노테이션을 사용하여 작성된 Service 구현 클래스가 이 계층에 속한다 .



Presentation Layer(Controller)
HTTP 요청을 받고 이요청을 비즈니스 계층으로 전송하는 역할






Todo 클래스별 역할
entity- 도메인 모델
Dto(Data Transfer Object) - 도메인 모델을 복사 -Request 데이터를 받는클래스 
responsedto -  응답에사용할 DTO를 포함.   
repository  - 영속레이어
service-서비스레이어
controller - 프레젠테이션 레이어 .


@Builder 와 @NoArgsConstructor @AllArgsConstructor 어노테이션을 다 같이 사용하는 이유 .

@Builder를 사용할 때 @Builder @AllArgsConstructor @NoArgsConstructor를 같이 쓰곤 한다. 왜일까?
클래스에 @Builder를 쓰면 해당 클래스의 객체에 빌더 패턴을 사용할 수 있고
@~~ArgsConstructor 지정된 게 없으면 @AllArgsConstructor를 자동으로 추가한다
@Builder만 썼을 때 문제는 @NoArgsConstructor가 추가되지 않았을 때 발생되는데
JPA가 객체를 생성해서 값을 주입할 때 Reflection API를 사용하는데 이 때 기본생성자를 호출해서
값을 매핑하기 때문에 JPA를 사용하려면 꼭 기본생성자를 추가해줘야 하기 때문이다.